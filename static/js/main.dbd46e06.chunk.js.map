{"version":3,"sources":["api.ts","styles/GlobalStyles.tsx","utils.ts","styles/QuestionCardStyles.tsx","components/QuestionCard.tsx","styles/AppStyles.tsx","App.tsx","index.tsx"],"names":["Difficulty","CustomStyles","createGlobalStyle","GlobalStyles","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","checkAnswer","userAnswer","questionNum","totalQuestions","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","DifficultySelect","Loading","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","EASY","setDifficulty","startTrivia","newQuestions","length","className","type","id","name","checked","onChange","htmlFor","MEDIUM","HARD","undefined","e","currentTarget","prev","answerObj","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbd46e06.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard',\n}\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty${difficulty}&category=11&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","import { createGlobalStyle } from 'styled-components';\nimport tw, { GlobalStyles as BaseStyles } from 'twin.macro';\n\nconst CustomStyles = createGlobalStyle`\n  html {\n    ${tw`h-full`}\n  }\n  body {\n    ${tw`font-catamaran bg-cover bg-gradient-to-r from-black via-gray-900 to-gray-800`}\n  }\n`;\n\nconst GlobalStyles = () => (\n  <>\n    <BaseStyles />\n    <CustomStyles />\n  </>\n);\n\nexport default GlobalStyles;\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import tw, { styled } from 'twin.macro';\n\nexport const Wrapper = styled.div`\n  ${tw`max-w-screen-lg mx-2 px-6 py-4 border-2 text-center border-primary_light rounded-md text-2xl text-secondary_light`}\n\n  h2 {\n    ${tw` my-2 text-lg text-accent_dark`}\n  }\n\n  p {\n    ${tw`mb-4 text-lg text-secondary`}\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  ${tw`transform hover:transition duration-500 hover:scale-105 animate-fade-in-down`}\n\n  button {\n    ${tw`cursor-pointer select-none text-white text-sm w-full h-10 my-4 bg-transparent border-2 border-white rounded-md`}\n    ${({ correct, userClicked }) =>\n      correct\n        ? tw`bg-gradient-to-r from-green-300 to-green-600`\n        : !correct && userClicked\n        ? tw`bg-gradient-to-r from-red-300 to-red-600`\n        : tw`bg-transparent`}\n  }\n`;\n","import React from 'react';\nimport { AnswerObject } from '../App';\nimport { Wrapper, ButtonWrapper } from '../styles/QuestionCardStyles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  checkAnswer: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNum: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  checkAnswer,\n  userAnswer,\n  questionNum,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <h2>\n      Question: {questionNum} / {totalQuestions}\n    </h2>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button\n            disabled={userAnswer ? true : false}\n            value={answer}\n            onClick={checkAnswer}\n          >\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\nexport default QuestionCard;\n","import tw, { styled } from 'twin.macro';\n\nexport const Wrapper = styled.div`\n  ${tw`flex flex-col items-center`}\n\n  h1 {\n    ${tw`mt-4 font-staatliches text-6xl text-transparent bg-clip-text bg-gradient-to-br from-secondary_dark to-secondary_light`}\n  }\n\n  .start,\n  .next {\n    ${tw`flex items-center h-6 my-8 px-10 py-8 cursor-pointer shadow-lg bg-gradient-to-b from-accent_light to-accent_dark border-2 border-white rounded-md text-xl text-white`}\n  }\n\n  .score {\n    ${tw`my-6 text-accent text-2xl`}\n  }\n`;\n\nexport const DifficultySelect = styled.div`\n  ${tw`max-w-screen-lg px-10 py-4 border-2 border-primary_light rounded-md text-2xl text-secondary_light`}\n\n  .radio-wrapper {\n    ${tw`flex flex-col items-start`}\n  }\n\n  .row {\n    ${tw`flex w-full border-t border-primary_light`}\n  }\n\n  label {\n    ${tw`flex items-center cursor-pointer text-xl my-4`}\n  }\n\n  span {\n    ${tw`w-8 h-8 inline-block mr-2 rounded-full border border-gray-500`}\n  }\n\n  .hidden {\n    ${tw`hidden`}\n  }\n\n  input[type='radio'] + label span {\n    transition: background 0.2s, transform 0.2s;\n  }\n\n  input[type='radio'] + label span:hover,\n  input[type='radio'] + label:hover span {\n    transform: scale(1.2);\n  }\n\n  input[type='radio']:checked + label span {\n    background-color: #4db6ac; //secondary\n    box-shadow: 0px 0px 0px 2px white inset;\n  }\n\n  input[type='radio']:checked + label {\n    color: #4db6ac; //secondary\n  }\n`;\n\nexport const Loading = styled.div`\n  .loading-ripple {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n    margin: 20px;\n  }\n  .loading-ripple div {\n    position: absolute;\n    border: 4px solid #ffb300;\n    opacity: 1;\n    border-radius: 50%;\n    animation: loading-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\n  }\n  .loading-ripple div:nth-child(2) {\n    animation-delay: -0.5s;\n  }\n  @keyframes loading-ripple {\n    0% {\n      top: 36px;\n      left: 36px;\n      width: 0;\n      height: 0;\n      opacity: 1;\n    }\n    100% {\n      top: 0px;\n      left: 0px;\n      width: 72px;\n      height: 72px;\n      opacity: 0;\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './api';\nimport QuestionCard from './components/QuestionCard';\nimport { QuestionState, Difficulty } from './api';\nimport * as Styled from './styles/AppStyles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [difficulty, setDifficulty] = useState(Difficulty.EASY);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, difficulty);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore((prev) => prev + 1);\n      const answerObj = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObj]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <Styled.Wrapper>\n      <h1>MOVIE TRIVIA</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <>\n          <button className='start' onClick={startTrivia}>\n            Start\n          </button>\n          <Styled.DifficultySelect>\n            <h3>Select Question Difficulty</h3>\n            <div className='radio-wrapper'>\n              <div>\n                <input\n                  type='radio'\n                  id='easy'\n                  name='easy'\n                  value='easy'\n                  className='hidden'\n                  checked={difficulty === Difficulty.EASY}\n                  onChange={() => setDifficulty(Difficulty.EASY)}\n                ></input>\n                <label htmlFor='easy'>\n                  <span></span>\n                  Easy\n                </label>\n              </div>\n              <div className='row'>\n                <input\n                  type='radio'\n                  id='medium'\n                  name='medium'\n                  value='medium'\n                  className='hidden'\n                  checked={difficulty === Difficulty.MEDIUM}\n                  onChange={() => setDifficulty(Difficulty.MEDIUM)}\n                ></input>\n                <label htmlFor='medium'>\n                  <span></span>Medium\n                </label>\n              </div>\n              <div className='row'>\n                <input\n                  type='radio'\n                  id='hard'\n                  name='hard'\n                  value='hard'\n                  className='hidden'\n                  checked={difficulty === Difficulty.HARD}\n                  onChange={() => setDifficulty(Difficulty.HARD)}\n                ></input>\n                <label htmlFor='hard'>\n                  <span></span>Hard\n                </label>\n              </div>\n            </div>\n          </Styled.DifficultySelect>\n        </>\n      ) : null}\n\n      {!gameOver ? <p className='score'>Score: {score}</p> : null}\n      {loading && (\n        <Styled.Loading>\n          <div className='loading-ripple'>\n            <div></div>\n            <div></div>\n          </div>\n        </Styled.Loading>\n      )}\n      {!loading && !gameOver && (\n        <QuestionCard\n          questionNum={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          checkAnswer={checkAnswer}\n        />\n      )}\n      {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 && (\n          <button className='next' onClick={nextQuestion}>\n            Next\n          </button>\n        )}\n    </Styled.Wrapper>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GlobalStyles from './styles/GlobalStyles';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}