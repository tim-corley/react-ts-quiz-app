{"version":3,"sources":["api.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","img/hollywood.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","checkAnswer","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","hollywood","DifficultySelect","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","EASY","setDifficulty","startTriva","newQuestions","length","type","id","name","checked","onChange","htmlFor","MEDIUM","HARD","undefined","e","currentTarget","prev","answerObj","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.accf94fd.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard',\n}\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty${difficulty}&category=11&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>\n          correct\n            ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n            : !correct && userClicked\n            ? 'linear-gradient(90deg, #ff5656, #c16868)'\n            : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n    }\n`;\n","import React from 'react';\nimport { AnswerObject } from '../App';\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  checkAnswer: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNum: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  checkAnswer,\n  userAnswer,\n  questionNum,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className='number'>\n      Question: {questionNum} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button\n            disabled={userAnswer ? true : false}\n            value={answer}\n            onClick={checkAnswer}\n          >\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/hollywood.3beacf5e.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport hollywood from './img/hollywood.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n    height: 100%;\n}\n\nbody {\n    background-image: url(${hollywood});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n}\n\n* {\n    box-sizing: border-box;\n    font-family: 'Catamaran', sans-serif;\n}\n`;\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff\n    }\n\n    .score {\n        color: #fff\n        font-size: 2rem;\n        margin: 0\n    }\n\n    h1 {\n        font-family: 'Staatliches', sans-serif;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        font-weight: 400;\n        text-align: center;\n        margin: 20px;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n`;\n\nexport const DifficultySelect = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 10px 35px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  .radio-buttons {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    min-width: 225px;\n  }\n\n  p {\n    font-size: 1rem;\n  }\n`;\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './api';\nimport QuestionCard from './components/QuestionCard';\nimport { QuestionState, Difficulty } from './api';\nimport { GlobalStyle, Wrapper, DifficultySelect } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [difficulty, setDifficulty] = useState(Difficulty.EASY);\n\n  const startTriva = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, difficulty);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore((prev) => prev + 1);\n      const answerObj = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObj]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>MOVIE TRIVIA</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <>\n            <button className='start' onClick={startTriva}>\n              Start\n            </button>\n            <DifficultySelect>\n              <p>Select Question Difficulty:</p>\n              <div className='radio-buttons'>\n                <div>\n                  <input\n                    type='radio'\n                    id='easy'\n                    name='easy'\n                    value='easy'\n                    checked={difficulty === Difficulty.EASY}\n                    onChange={() => setDifficulty(Difficulty.EASY)}\n                  ></input>\n                  <label htmlFor='easy'>Easy</label>\n                </div>\n                <div>\n                  <input\n                    type='radio'\n                    id='medium'\n                    name='medium'\n                    value='medium'\n                    checked={difficulty === Difficulty.MEDIUM}\n                    onChange={() => setDifficulty(Difficulty.MEDIUM)}\n                  ></input>\n                  <label htmlFor='medium'>Medium</label>\n                </div>\n                <div>\n                  <input\n                    type='radio'\n                    id='hard'\n                    name='hard'\n                    value='hard'\n                    checked={difficulty === Difficulty.HARD}\n                    onChange={() => setDifficulty(Difficulty.HARD)}\n                  ></input>\n                  <label htmlFor='hard'>Hard</label>\n                </div>\n              </div>\n            </DifficultySelect>\n          </>\n        ) : null}\n\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n        {loading && <p className='loading'>Loading Questions...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNum={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            checkAnswer={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n          !loading &&\n          userAnswers.length === number + 1 &&\n          number !== TOTAL_QUESTIONS - 1 && (\n            <button className='next' onClick={nextQuestion}>\n              Next\n            </button>\n          )}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}